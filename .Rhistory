Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})")) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1 <- make_table1(full_matched_data)
matched_table1
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
Age = age,
Sex = sex,
Risk_type = risk_type,
Aortic_root_replacement = yn_aoroot,
Asc_aorta_replacement = yn_ascao,
Arch_replacement = yn_arch,
AVR = yn_avr,
TVR = yn_tvr,
MVR = yn_mvr,
CABG = yn_cabg,
TEVAR = yn_tevar,
Myocardial_bridge_unroofing = yn_myob,
Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})"),
digits = list(all_continuous() ~ 1)) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1
matched_table1 <- make_table1(full_matched_data)
matched_table1
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
Age = age,
Sex = sex,
Risk_type = risk_type,
Aortic_root_replacement = yn_aoroot,
Asc_aorta_replacement = yn_ascao,
Arch_replacement = yn_arch,
AVR = yn_avr,
TVR = yn_tvr,
MVR = yn_mvr,
CABG = yn_cabg,
TEVAR = yn_tevar,
Myocardial_bridge_unroofing = yn_myob,
Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})"),
digits = list(all_continuous() ~ 1,
all_categorical() ~ 1)) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1 <- make_table1(full_matched_data)
matched_table1
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE, shiny.port=3300)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE, shiny.port=3300)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
setwd("~/abstraction-app/")
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE, shiny.port=3300)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
clinical_notes <- read_csv("~/Downloads/clinical_note (1).csv")
library(tidyverse)
clinical_notes <- read_csv("~/Downloads/clinical_note (1).csv")
test <- read.csv("~/Downloads/combined_data_v3.csv")
test
test <- read.csv("~/Downloads/combined_data_v3.csv") %>%
tibble()
library(tidyverse)
test <- read.csv("~/Downloads/combined_data_v3.csv") %>%
tibble()
test
View(test)
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE,
shiny.port=3300,
shiny.maxRequestSize = 50 * 1024^2)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE,
shiny.port=3300,
shiny.maxRequestSize = 50 * 1024^2)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE,
shiny.port=3300,
shiny.maxRequestSize = 50 * 1024^2)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
source("~/unstructured-data/common_use/spacy_helpers.R")
source("~/unstructured-data/common_use/snorkel_helpers.R")
reticulate::py_install("snorkel", envname = "clinspacy", pip = TRUE)
source("~/unstructured-data/common_use/snorkel_helpers.R")
source("~/unstructured-data/common_use/nlp_functions.R")
source("~/unstructured-data/common_use/helper_functions.R")
# Liver weak labels
get_liver_net_weak_labels_docs <- function(in_df, automated_lf_list = NULL) {
net_regex <- "neuroendocrine|carcinoid|islet"
weak_labels <- in_df %>%
mutate(label1 = ifelse(grepl(glue("diagnosis:.*(@@net_regex@@)", .open = "@@", .close = "@@"), text, ignore.case = T), 1, -1),
label2 = ifelse(grepl(glue("diagnosis:.*no(\\s+\\S+){0,5} (@@net_regex@@)", .open = "@@", .close = "@@"), text, ignore.case = T), 0, -1),
label3 = ifelse(grepl(glue("comment:.*no(\\s+\\S+){0,5} (@@net_regex@@)", .open = "@@", .close = "@@"), text, ignore.case = T), 0, -1),
label4 = ifelse(grepl(glue("comment:.*(@@net_regex@@)", .open = "@@", .close = "@@"), text, ignore.case = T), 1, -1),
label5 = ifelse(grepl(glue("(is|are) consistent with(\\s+\\S+){0,5} @@net_regex@@", .open = "@@", .close = "@@"), text, ignore.case = T), 1, -1),
label6 = ifelse(grepl(glue("diagnosis:.*liver(\\s+\\S+){0,10} (@@net_regex@@)", .open = "@@", .close = "@@"), text, ignore.case = T), 1, -1),
label7 = ifelse(grepl(glue("diagnosis:.*liver(\\s+\\S+){0,10} metastatic(\\s+\\S+){0,5} (@@net_regex@@)", .open = "@@", .close = "@@"), text, ignore.case = T), 1, -1),
label8 = ifelse(grepl(glue("diagnosis:.*liver(\\s+\\S+){0,10} (@@net_regex@@)", .open = "@@", .close = "@@"), text, ignore.case = T), 1, -1),
# label6 = ifelse(grepl("neuroendocrine", lemma, ignore.case = T), 1, -1),
# label7 = ifelse(grepl("neuroendocrine", lemma, ignore.case = T) &
# grepl("diagnosis", section_category) &
# section_category != "clinical_diagnosis", 1, -1)
)
if (!is.null(automated_lf_list)) {
weak_labels <- imap(automated_lf_list,
~in_df %>%
mutate(!!sym(glue("label_auto_{.y}")) := .x(text))) %>%
reduce(left_join) %>%
full_join(weak_labels)
}
return(weak_labels)
}
get_liver_net_weak_labels_entities <- function(in_df) {
net_regex <- "neuroendocrine|carcinoid|islet"
in_df %>%
mutate(label_1 = ifelse(!grepl("liver|neuroendocrine|carcinoid", lemma, ignore.case = T) &
grepl("diagnosis|history|specimen", section_category, ignore.case = T), 0, -1),
label_2 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
section_category == "comment" &
is_negated, 0, -1),
label_3 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
section_category %in% c("diagnosis",
"frozen_section_diagnosis",
"cytologic diagnosis") &
!is_negated, 0, -1),
label_4 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
section_category %in% c("diagnosis",
"frozen_section_diagnosis",
"cytologic diagnosis") &
!is_negated, 1, -1),
label_5 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
section_category %in% "comment" &
is_negated, 0, -1),
label_6 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
section_category %in% "comment" &
!is_negated &
!is_hypothetical, 1, -1),
label_7 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
section_category %in% "comment", 1, -1),
label_8 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
grepl("diagnosis", section_category), 1, -1),
label_9 = ifelse(grepl(net_regex, lemma, ignore.case = T) &
grepl("diagnosis", section_category) &
section_category != "clinical_diagnosis", 1, -1))
}
get_liver_net_all_weak_labels <- function(parsed_data,
automated_lf_list = NULL) {
print("Getting weak labels")
weak_labels_sentences_base <- parsed_data$parsed_sections %>%
unnest(section_parse) %>%
filter(grepl("specimen|diagnosis|comment", section_category)) %>%
get_liver_net_weak_labels_entities()
weak_labels_sentences <- weak_labels_sentences_base %>%
group_by(uniq_id) %>%
summarize_at(vars(starts_with("label_")), ~as.numeric(any(.x == 1)))
weak_labels_docs <- parsed_data$raw_data %>%
get_liver_net_weak_labels_docs(automated_lf_list = automated_lf_list) %>%
select(uniq_id, starts_with("label"))
all_weak_labels <- full_join(weak_labels_docs, weak_labels_sentences) %>%
mutate_if(is.numeric, ~coalesce(.x, -1))
out <- list(weak_labels_sentences = weak_labels_sentences,
weak_labels_docs = weak_labels_docs,
all_weak_labels = all_weak_labels,
weak_labels_sentences_base = weak_labels_sentences_base)
return(out)
}
parse_data_sections_and_docs <- function(in_df) {
print("Building spacy sectionizer model")
sectionizer_model <- make_spacy_sectionizer()
print("Building spacy negation model")
negation_model <- make_spacy_negex()
print("Parsing sections")
text_sections <- in_df %>%
mutate(section_parse = map(text, parse_text_spacy,
spacy_nlp = sectionizer_model,
parsing_function = parse_spacy_sections)) %>%
unnest(section_parse)
print("Parsing sentences")
parsed_sections <- text_sections %>%
mutate(section_parse = map(section_body, parse_text_spacy,
spacy_nlp = negation_model,
parsing_function = parse_spacy_entities))
out <- list(text_sections = text_sections,
parsed_sections = parsed_sections,
raw_data = in_df)
return(out)
}
# Clean data
prepare_for_abstraction <- function(n_to_label = 30,
out_file = "/tmp/liver_net_to_label.csv") {
load("~/Downloads/dotate_lung_liver.RData")
unlabeled_data <- files_to_send$liver
cleaned <- unlabeled_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.| ", "_", .)) %>%
filter(!tolower(type) %in% c("pap smear"),
grepl("liver", tolower(text))) %>%
mutate(patient_id,
text,
chart_id = 1:n())
to_label <- cleaned %>%
head(n_to_label)
unlabeled <- dplyr::setdiff(cleaned, to_label)
write_csv(to_label %>%
convert_colnames_for_app, file = out_file)
out <- list(to_label = to_label,
unlabeled = unlabeled)
return(out)
}
get_abstracted_data <- function() {
abstracted_data <- read_csv("~/Downloads/liver_net_to_label.csv")
abstracted_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.", "_", .)) %>%
# filter(!flag) %>%
transmute(patient_id,
chart_id,
uniq_id = paste0(patient_id, "_", chart_id),
text,
outcome = !is.na(liver_net_date),
flag,
flag_reason)
}
get_unlabeled_data <- function() {
all_data <- prepare_for_abstraction()
all_data$unlabeled %>%
select(patient_id, chart_id, text) %>%
mutate(uniq_id = paste0(patient_id, "_", chart_id),)
}
load("~/Downloads/dotate_lung_liver.RData")
unlabeled_data <- files_to_send$dotatate
unlabeled_data
unlabeled_data$Title %>% unique()
unlabeled_data %>% filter(grepl("dotatate", tolower(Title)))
unlabeled_data %>% filter(grepl("dotatate", tolower(Title))) %>% distinct(Title)
# Clean data
prepare_for_abstraction <- function(n_to_label = 30,
out_file = "/tmp/liver_net_to_label.csv") {
load("~/Downloads/dotate_lung_liver.RData")
unlabeled_data <- files_to_send$dotatate
cleaned <- unlabeled_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.| ", "_", .)) %>%
filter(grepl("dotatate", tolower(title))) %>%
mutate(patient_id,
text,
chart_id = 1:n())
to_label <- cleaned %>%
head(n_to_label)
unlabeled <- dplyr::setdiff(cleaned, to_label)
write_csv(to_label %>%
convert_colnames_for_app, file = out_file)
out <- list(to_label = to_label,
unlabeled = unlabeled)
return(out)
}
get_abstracted_data <- function() {
abstracted_data <- read_csv("~/Downloads/liver_net_to_label.csv")
abstracted_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.", "_", .)) %>%
# filter(!flag) %>%
transmute(patient_id,
chart_id,
uniq_id = paste0(patient_id, "_", chart_id),
text,
outcome = !is.na(liver_net_date),
flag,
flag_reason)
}
get_unlabeled_data <- function() {
all_data <- prepare_for_abstraction()
all_data$unlabeled %>%
select(patient_id, chart_id, text) %>%
mutate(uniq_id = paste0(patient_id, "_", chart_id),)
}
# Clean data
prepare_for_abstraction <- function(n_to_label = 30,
out_file = "/tmp/thoracic_net_to_label.csv") {
load("~/Downloads/dotate_lung_liver.RData")
unlabeled_data <- files_to_send$dotatate
cleaned <- unlabeled_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.| ", "_", .)) %>%
filter(grepl("dotatate", tolower(title))) %>%
mutate(patient_id,
text,
chart_id = 1:n())
to_label <- cleaned %>%
head(n_to_label)
unlabeled <- dplyr::setdiff(cleaned, to_label)
write_csv(to_label %>%
convert_colnames_for_app, file = out_file)
out <- list(to_label = to_label,
unlabeled = unlabeled)
return(out)
}
get_abstracted_data <- function() {
abstracted_data <- read_csv("~/Downloads/liver_net_to_label.csv")
abstracted_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.", "_", .)) %>%
# filter(!flag) %>%
transmute(patient_id,
chart_id,
uniq_id = paste0(patient_id, "_", chart_id),
text,
outcome = !is.na(liver_net_date),
flag,
flag_reason)
}
get_unlabeled_data <- function() {
all_data <- prepare_for_abstraction()
all_data$unlabeled %>%
select(patient_id, chart_id, text) %>%
mutate(uniq_id = paste0(patient_id, "_", chart_id),)
}
# Clean data
prepare_for_abstraction <- function(n_to_label = 30,
out_file = "/tmp/thoracic_net_to_label.csv") {
load("~/Downloads/dotate_lung_liver.RData")
unlabeled_data <- files_to_send$dotatate
cleaned <- unlabeled_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.| ", "_", .)) %>%
filter(grepl("dotatate", tolower(title))) %>%
mutate(patient_id,
text,
chart_id = 1:n())
to_label <- cleaned %>%
head(n_to_label)
unlabeled <- dplyr::setdiff(cleaned, to_label)
write_csv(to_label %>%
convert_colnames_for_app, file = out_file)
out <- list(to_label = to_label,
unlabeled = unlabeled)
return(out)
}
get_abstracted_data <- function() {
abstracted_data <- read_csv("~/Downloads/thoracic_net_to_label.csv")
abstracted_data %>%
rename_all(~tolower(.x) %>%
gsub("\\.", "_", .)) %>%
# filter(!flag) %>%
transmute(patient_id,
chart_id,
uniq_id = paste0(patient_id, "_", chart_id),
text,
outcome = !is.na(liver_net_date),
flag,
flag_reason)
}
get_unlabeled_data <- function() {
all_data <- prepare_for_abstraction()
all_data$unlabeled %>%
select(patient_id, chart_id, text) %>%
mutate(uniq_id = paste0(patient_id, "_", chart_id),)
}
unlabeled_data <- get_unlabeled_data()
