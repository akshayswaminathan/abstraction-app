select(-cpb,
-xclamp,
-circarr,
-icu_los,
-total_los,
-yn_death30,
-yn_morb30,
-yn_stroke,
-yn_renf,
-yn_reop,
-yn_longvent,
-yn_dswi,
-yn_bldpd,
-rbc_total,
-rbc_icu) %>%
mutate(unit = unit == "J4") %>%
mutate_if(is.character, ~ifelse(.x == "missing", "n", .x))
match_fit <- matchit(unit ~ . -pt_num,
data = matching_data,
method = "full",
exact = c(
# "yn_aoroot" ,
# "yn_ascao",
# "yn_arch",
"yn_avr" # 400
# "yn_tvr",
# "yn_mvr",
# "yn_cabg" # 356
# "yn_tevar" # 337
# "yn_myob",
# "yn_sept"
),
max.controls = 3)
matched_data <- match.data(match_fit)
matched_data$unit %>% table()
balance_plot <- love.plot(match_fit, binary = "std", thresholds = c(m = .1))
balance_plot
balance_plot$data
matched_table1 <- make_table1(matched_data)
matched_data
full_matched_data <- matched_data %>%
left_join(aats_data[, c("pt_num", setdiff(names(aats_data), names(matched_data)))])
full_matched_data
matched_table1 <- make_table1(full_matched_data)
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
Age = age,
Sex = sex,
Risk_type = risk_type,
Aortic_root_replacement = yn_aoroot,
Asc_aorta_replacement = yn_ascao,
Arch_replacement = yn_arch,
AVR = yn_avr,
TVR = yn_tvr,
MBR = yn_mvr,
CABG = yn_cabg,
TEVAR = yn_tevar,
Myocardial_bridge_unroofing = yn_myob,
Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no") %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1 <- make_table1(full_matched_data)
matched_table1
names(full_matched_data)
names(full_matched_data)
outcomes <- c("icu_los", "total_los", "yn_death30", "yn_morb30", "yn_stroke",
"yn_renf", "yn_reop", "yn_longvent", "yn_dswi", "yn_bldpd",
"rbc_total", "rbc_icu")
model_results <- map(outcomes,
function(outcome_var) {
in_dat <- full_matched_data %>%
select(outcome = !!sym(outcome_var),
unit,
all_of(names(matching_data)),
-pt_num)
if (grepl("yn", outcome_var)) {
in_dat1 <- in_dat %>%
mutate(outcome = outcome == "y")
model_fit <- glm(outcome ~ ., family = binomial, data = in_dat1)
results <- broom::tidy(model_fit)
} else {
model_fit <- lm(outcome ~ .,  data = in_dat1)
results <- broom::tidy(model_fit)
}
return(results)
})
model_results <- map(outcomes,
function(outcome_var) {
in_dat <- full_matched_data %>%
select(outcome = !!sym(outcome_var),
unit,
all_of(names(matching_data)),
-pt_num)
if (grepl("yn", outcome_var)) {
in_dat1 <- in_dat %>%
mutate(outcome = outcome == "y")
model_fit <- glm(outcome ~ ., family = binomial, data = in_dat1)
results <- broom::tidy(model_fit)
} else {
model_fit <- lm(outcome ~ .,  data = in_dat)
results <- broom::tidy(model_fit)
}
return(results)
})
model_results
model_results <- map(outcomes,
function(outcome_var) {
in_dat <- full_matched_data %>%
select(outcome = !!sym(outcome_var),
unit,
all_of(names(matching_data)),
-pt_num)
if (grepl("yn", outcome_var)) {
in_dat1 <- in_dat %>%
mutate(outcome = outcome == "y")
model_fit <- glm(outcome ~ ., family = binomial, data = in_dat1)
results <- broom::tidy(model_fit)
} else {
model_fit <- lm(outcome ~ .,  data = in_dat)
results <- broom::tidy(model_fit)
}
return(results %>%
filter(grepl("unit", term)) %>%
mutate(outcome = outcome_var))
})
model_results
model_results <- map_dfr(outcomes,
function(outcome_var) {
in_dat <- full_matched_data %>%
select(outcome = !!sym(outcome_var),
unit,
all_of(names(matching_data)),
-pt_num)
if (grepl("yn", outcome_var)) {
in_dat1 <- in_dat %>%
mutate(outcome = outcome == "y")
model_fit <- glm(outcome ~ ., family = binomial, data = in_dat1)
results <- broom::tidy(model_fit)
} else {
model_fit <- lm(outcome ~ .,  data = in_dat)
results <- broom::tidy(model_fit)
}
return(results %>%
filter(grepl("unit", term)) %>%
mutate(outcome = outcome_var))
})
model_results
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
# Age = age,
# Sex = sex,
# Risk_type = risk_type,
# Aortic_root_replacement = yn_aoroot,
# Asc_aorta_replacement = yn_ascao,
# Arch_replacement = yn_arch,
# AVR = yn_avr,
# TVR = yn_tvr,
# MVR = yn_mvr,
# CABG = yn_cabg,
# TEVAR = yn_tevar,
# Myocardial_bridge_unroofing = yn_myob,
# Septal_myectomy = yn_sept,
# Incision_type = incision_type,
# CPB_use = yn_cpb,
# CPB_use_time = cpb,
# Circ_arrest_use = yn_circarr,
# Circ_arrest_use_time = circarr,
# Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no") %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1 <- make_table1(full_matched_data)
matched_table1
model_results
model_results <- map_dfr(outcomes,
function(outcome_var) {
in_dat <- full_matched_data %>%
select(outcome = !!sym(outcome_var),
unit,
all_of(names(matching_data)),
-pt_num)
if (grepl("yn", outcome_var)) {
in_dat1 <- in_dat %>%
mutate(outcome = outcome == "y")
model_fit <- glm(outcome ~ ., family = binomial, data = in_dat1)
results <- broom::tidy(model_fit)
} else {
model_fit <- lm(outcome ~ .,  data = in_dat)
results <- broom::tidy(model_fit)
}
return(results %>%
filter(grepl("unit", term)) %>%
mutate(outcome = outcome_var))
}) %>%
select(`Estimate (log odds or linear coefficient)` = estimate,
`P-value` = p.value,
Outcome = outcome)
model_results
model_results <- map_dfr(outcomes,
function(outcome_var) {
in_dat <- full_matched_data %>%
select(outcome = !!sym(outcome_var),
unit,
all_of(names(matching_data)),
-pt_num)
if (grepl("yn", outcome_var)) {
in_dat1 <- in_dat %>%
mutate(outcome = outcome == "y")
model_fit <- glm(outcome ~ ., family = binomial, data = in_dat1)
results <- broom::tidy(model_fit)
} else {
model_fit <- lm(outcome ~ .,  data = in_dat)
results <- broom::tidy(model_fit)
}
return(results %>%
filter(grepl("unit", term)) %>%
mutate(outcome = outcome_var))
}) %>%
select(`Estimate (beta coefficient, J4 vs traditional)` = estimate,
`P-value` = p.value,
Outcome = outcome)
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
Age = age,
Sex = sex,
Risk_type = risk_type,
Aortic_root_replacement = yn_aoroot,
Asc_aorta_replacement = yn_ascao,
Arch_replacement = yn_arch,
AVR = yn_avr,
TVR = yn_tvr,
MVR = yn_mvr,
CABG = yn_cabg,
TEVAR = yn_tevar,
Myocardial_bridge_unroofing = yn_myob,
Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no") %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1 <- make_table1(full_matched_data)
out <- list("Balance plot" = balance_plot,
"Matched table" = matched_table1,
"Model results" = model_results)
source("~/unstructured-data/common_use/helper_functions.R")
render_markdown_output(out,
markdown_title = "AATS ICU Analysis",
output_file = "/tmp/aats.html")
?tbl_summary
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
Age = age,
Sex = sex,
Risk_type = risk_type,
Aortic_root_replacement = yn_aoroot,
Asc_aorta_replacement = yn_ascao,
Arch_replacement = yn_arch,
AVR = yn_avr,
TVR = yn_tvr,
MVR = yn_mvr,
CABG = yn_cabg,
TEVAR = yn_tevar,
Myocardial_bridge_unroofing = yn_myob,
Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})")) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1 <- make_table1(full_matched_data)
matched_table1
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
Age = age,
Sex = sex,
Risk_type = risk_type,
Aortic_root_replacement = yn_aoroot,
Asc_aorta_replacement = yn_ascao,
Arch_replacement = yn_arch,
AVR = yn_avr,
TVR = yn_tvr,
MVR = yn_mvr,
CABG = yn_cabg,
TEVAR = yn_tevar,
Myocardial_bridge_unroofing = yn_myob,
Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})"),
digits = list(all_continuous() ~ 1)) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1
matched_table1 <- make_table1(full_matched_data)
matched_table1
make_table1 <- function(in_dat) {
in_dat %>%
select(Unit = unit,
Age = age,
Sex = sex,
Risk_type = risk_type,
Aortic_root_replacement = yn_aoroot,
Asc_aorta_replacement = yn_ascao,
Arch_replacement = yn_arch,
AVR = yn_avr,
TVR = yn_tvr,
MVR = yn_mvr,
CABG = yn_cabg,
TEVAR = yn_tevar,
Myocardial_bridge_unroofing = yn_myob,
Septal_myectomy = yn_sept,
Incision_type = incision_type,
CPB_use = yn_cpb,
CPB_use_time = cpb,
Circ_arrest_use = yn_circarr,
Circ_arrest_use_time = circarr,
Cross_clamp_time = xclamp,
ICU_LOS = icu_los,
Total_LOS = total_los,
ICU_readmission = yn_readmit,
`30_day_mortality` = yn_death30,
`30_day_morbidity` = yn_morb30,
Permanent_stroke = yn_stroke,
Renal_failure = yn_renf,
Cardiac_reoperation = yn_reop,
Prolonged_intubation = yn_longvent,
Deep_sternal_wound_infection = yn_dswi,
Blood_transfusion = yn_bldpd,
Total_post_op_RBC_transfusion = rbc_total,
Post_op_ICU_RBC_transfusion = rbc_icu
) %>%
rename_all(~gsub("_", " ", .x)) %>%
tbl_summary(by = "Unit",
missing = "no",
statistic = list(all_continuous() ~ "{mean} ({sd})"),
digits = list(all_continuous() ~ 1,
all_categorical() ~ 1)) %>%
add_p(pvalue_fun = ~style_pvalue(.x, digits = 2)) %>%
add_overall()
}
matched_table1 <- make_table1(full_matched_data)
matched_table1
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE, shiny.port=3300)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE, shiny.port=3300)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
setwd("~/abstraction-app/")
library(shiny)
library(shiny.router)
library(shiny.tailwind)
library(stringr)
library(purrr)
library(commonr)
library(rheroicons)
library(marker)
options(shiny.autoreload = TRUE, shiny.port=3300)
print(getOption("shiny.autoreload"))
server <- require.r('./server.R')$server
ui <- require.r('./ui.R')$ui
# Create Shiny app ----
app <- shinyApp(ui = ui, server = server)
runApp(app)
clinical_notes <- read_csv("~/Downloads/clinical_note (1).csv")
library(tidyverse)
clinical_notes <- read_csv("~/Downloads/clinical_note (1).csv")
test <- read.csv("~/Downloads/combined_data_v3.csv")
test
test <- read.csv("~/Downloads/combined_data_v3.csv") %>%
tibble()
library(tidyverse)
test <- read.csv("~/Downloads/combined_data_v3.csv") %>%
tibble()
test
View(test)
